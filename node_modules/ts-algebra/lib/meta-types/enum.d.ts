import { If, IsNever, And } from "../utils";
import { Never } from "./never";
import { ResolveOptions } from "./resolve";
import { Deserialized, IsSerialized } from "./utils";
export declare type EnumTypeId = "enum";
export declare type Enum<V, I extends boolean = false, D = never> = If<IsNever<V>, Never, {
    type: EnumTypeId;
    values: V;
    isSerialized: I;
    deserialized: D;
}>;
export declare type EnumType = {
    type: EnumTypeId;
    values: any;
    isSerialized: boolean;
    deserialized: unknown;
};
export declare type EnumValues<E extends EnumType> = E["values"];
export declare type ResolveEnum<T extends EnumType, O extends ResolveOptions> = And<O["deserialize"], IsSerialized<T>> extends true ? Deserialized<T> : EnumValues<T>;
