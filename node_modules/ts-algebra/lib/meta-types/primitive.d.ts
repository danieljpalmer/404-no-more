import { If, IsNever, And } from "../utils";
import { Never } from "./never";
import { ResolveOptions } from "./resolve";
import { Deserialized, IsSerialized } from "./utils";
export declare type PrimitiveTypeId = "primitive";
export declare type Primitive<T extends null | boolean | number | string, I extends boolean = false, D extends unknown = never> = $Primitive<T, I, D>;
export declare type $Primitive<T, I = false, D = never> = If<IsNever<T>, Never, {
    type: PrimitiveTypeId;
    value: T;
    isSerialized: I;
    deserialized: D;
}>;
export declare type PrimitiveType = {
    type: PrimitiveTypeId;
    value: null | boolean | number | string;
    isSerialized: boolean;
    deserialized: unknown;
};
export declare type PrimitiveValue<T extends PrimitiveType> = T["value"];
export declare type ResolvePrimitive<T extends PrimitiveType, O extends ResolveOptions> = And<O["deserialize"], IsSerialized<T>> extends true ? Deserialized<T> : PrimitiveValue<T>;
