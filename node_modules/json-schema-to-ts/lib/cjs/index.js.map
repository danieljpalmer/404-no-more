{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAyBA","sourcesContent":["import type { M } from \"ts-algebra\";\n\nimport type {\n  JSONSchema7 as $JSONSchema7,\n  JSONSchema7Reference as $JSONSchema7Reference,\n  JSONSchema7Extension,\n  ExtendedJSONSchema7 as $ExtendedJSONSchema7,\n  ExtendedJSONSchema7Reference as $ExtendedJSONSchema7Reference,\n  UnextendJSONSchema7,\n  FromSchemaOptions,\n  FromSchemaDefaultOptions,\n  FromExtendedSchemaOptions,\n} from \"./definitions\";\nimport type { ParseOptions } from \"./parse-options\";\nimport type { ParseSchema } from \"./parse-schema\";\nimport type { Readonly, Writable } from \"./type-utils\";\n\nexport type {\n  DeserializationPattern,\n  FromSchemaOptions,\n  FromExtendedSchemaOptions,\n  FromSchemaDefaultOptions,\n  JSONSchema7Extension,\n} from \"./definitions\";\nexport type { $Compiler, Compiler, $Validator, Validator } from \"./utils\";\nexport {\n  wrapCompilerAsTypeGuard,\n  wrapValidatorAsTypeGuard,\n  asConst,\n} from \"./utils\";\n\n/**\n * Unwidened V7 JSON schema (e.g. defined with the `as const` statement)\n */\nexport type JSONSchema7 = $JSONSchema7 | Readonly<$JSONSchema7>;\n\n/**\n * Unwidened extended V7 JSON schema (e.g. defined with the `as const` statement)\n */\nexport type ExtendedJSONSchema7<E extends JSONSchema7Extension> =\n  | $ExtendedJSONSchema7<E>\n  | Readonly<$ExtendedJSONSchema7<E>>;\n\n/**\n * Unwidened V7 JSON schema reference (e.g. defined with the `as const` statement)\n */\nexport type JSONSchema7Reference =\n  | $JSONSchema7Reference\n  | Readonly<$JSONSchema7Reference>;\n\n/**\n * Unwidened extended V7 JSON schema reference (e.g. defined with the `as const` statement)\n */\nexport type ExtendedJSONSchema7Reference<E extends JSONSchema7Extension> =\n  | $ExtendedJSONSchema7Reference<E>\n  | Readonly<$ExtendedJSONSchema7Reference<E>>;\n\n/**\n * Unwidened JSON schema (e.g. defined with the `as const` statement)\n */\nexport type JSONSchema = JSONSchema7;\n\n/**\n * Unwidened extended JSON schema (e.g. defined with the `as const` statement)\n */\nexport type ExtendedJSONSchema<E extends JSONSchema7Extension> =\n  ExtendedJSONSchema7<E>;\n\n/**\n * Given a JSON schema defined with the `as const` statement, infers the type of valid instances\n *\n * @param S JSON schema\n */\nexport type FromSchema<\n  S extends JSONSchema,\n  Opt extends FromSchemaOptions = FromSchemaDefaultOptions,\n  W extends $JSONSchema7 = S extends Record<string | number | symbol, unknown>\n    ? Writable<S>\n    : S,\n> = M.$Resolve<ParseSchema<W, ParseOptions<W, Opt>>>;\n\n/**\n * Given an extended JSON schema defined with the `as const` statement, infers the type of valid instances\n *\n * @param S JSON schema\n */\nexport type FromExtendedSchema<\n  E extends JSONSchema7Extension,\n  S extends ExtendedJSONSchema<E>,\n  Opt extends FromExtendedSchemaOptions<E> = FromSchemaDefaultOptions,\n  U = UnextendJSONSchema7<E, S>,\n> = U extends JSONSchema ? FromSchema<U, Opt> : never;\n"],"file":"index.js"}