import type { M } from "ts-algebra";
import type { JSONSchema7 as $JSONSchema7, JSONSchema7Reference as $JSONSchema7Reference, JSONSchema7Extension, ExtendedJSONSchema7 as $ExtendedJSONSchema7, ExtendedJSONSchema7Reference as $ExtendedJSONSchema7Reference, UnextendJSONSchema7, FromSchemaOptions, FromSchemaDefaultOptions, FromExtendedSchemaOptions } from "./definitions";
import type { ParseOptions } from "./parse-options";
import type { ParseSchema } from "./parse-schema";
import type { Readonly, Writable } from "./type-utils";
export type { DeserializationPattern, FromSchemaOptions, FromExtendedSchemaOptions, FromSchemaDefaultOptions, JSONSchema7Extension, } from "./definitions";
export type { $Compiler, Compiler, $Validator, Validator } from "./utils";
export { wrapCompilerAsTypeGuard, wrapValidatorAsTypeGuard, asConst, } from "./utils";
export type JSONSchema7 = $JSONSchema7 | Readonly<$JSONSchema7>;
export type ExtendedJSONSchema7<E extends JSONSchema7Extension> = $ExtendedJSONSchema7<E> | Readonly<$ExtendedJSONSchema7<E>>;
export type JSONSchema7Reference = $JSONSchema7Reference | Readonly<$JSONSchema7Reference>;
export type ExtendedJSONSchema7Reference<E extends JSONSchema7Extension> = $ExtendedJSONSchema7Reference<E> | Readonly<$ExtendedJSONSchema7Reference<E>>;
export type JSONSchema = JSONSchema7;
export type ExtendedJSONSchema<E extends JSONSchema7Extension> = ExtendedJSONSchema7<E>;
export type FromSchema<S extends JSONSchema, Opt extends FromSchemaOptions = FromSchemaDefaultOptions, W extends $JSONSchema7 = S extends Record<string | number | symbol, unknown> ? Writable<S> : S> = M.$Resolve<ParseSchema<W, ParseOptions<W, Opt>>>;
export type FromExtendedSchema<E extends JSONSchema7Extension, S extends ExtendedJSONSchema<E>, Opt extends FromExtendedSchemaOptions<E> = FromSchemaDefaultOptions, U = UnextendJSONSchema7<E, S>> = U extends JSONSchema ? FromSchema<U, Opt> : never;
